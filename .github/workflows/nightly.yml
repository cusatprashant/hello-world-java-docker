name: Nightly Build & Maintenance

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  nightly-build:
    runs-on: ubuntu-latest
    name: Nightly Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run full test suite
      run: |
        mvn clean verify \
          -Dspring.profiles.active=test \
          -Dmaven.test.failure.ignore=false

    - name: Build application
      run: |
        mvn clean package \
          -DskipTests \
          -Dspring.profiles.active=prod

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push nightly image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly-${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload nightly artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nightly-build-${{ github.run_number }}
        path: |
          target/*.jar
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 7

  dependency-update-check:
    runs-on: ubuntu-latest
    name: Check for Dependency Updates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Check for updates
      run: |
        mvn versions:display-dependency-updates > dependency-updates.txt
        mvn versions:display-plugin-updates > plugin-updates.txt

    - name: Create dependency update issue
      if: contains(steps.check.outputs.updates, 'available')
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: 'Nightly Dependency Update Check - ${{ github.run_number }}'
        content-filepath: dependency-updates.txt
        labels: dependencies, maintenance

    - name: Upload update reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports-${{ github.run_number }}
        path: |
          dependency-updates.txt
          plugin-updates.txt
        retention-days: 30

  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run security audit
      run: |
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=0 \
          -Dformat=XML,JSON,HTML

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-${{ github.run_number }}
        path: target/dependency-check-report.*
        retention-days: 30

  cleanup-old-artifacts:
    runs-on: ubuntu-latest
    name: Cleanup Old Artifacts
    
    steps:
    - name: Delete old workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 10

  performance-baseline:
    runs-on: ubuntu-latest
    name: Performance Baseline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Start application
      run: |
        java -jar target/*.jar &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV

    - name: Wait for application to start
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'

    - name: Install performance testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-utils wrk

    - name: Run performance baseline tests
      run: |
        echo "Running Apache Bench tests..."
        ab -n 10000 -c 50 -g baseline-ab.tsv http://localhost:8080/ > baseline-ab.txt
        
        echo "Running wrk tests..."
        wrk -t12 -c400 -d30s http://localhost:8080/ > baseline-wrk.txt

    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

    - name: Store performance baseline
      uses: actions/upload-artifact@v4
      with:
        name: performance-baseline-${{ github.run_number }}
        path: |
          baseline-*.txt
          baseline-*.tsv
        retention-days: 90

  health-check:
    runs-on: ubuntu-latest
    name: Application Health Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Start application
      run: |
        java -jar target/*.jar &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV

    - name: Wait for application to start
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8080/; do sleep 2; done'

    - name: Comprehensive health checks
      run: |
        echo "🏥 Running comprehensive health checks..."
        
        # Basic endpoint test
        echo "Testing root endpoint..."
        curl -f -s http://localhost:8080/ | jq .
        
        # Response time test
        echo "Testing response time..."
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8080/)
        echo "Response time: ${RESPONSE_TIME}s"
        
        # Memory usage check
        echo "Checking memory usage..."
        ps aux | grep java
        
        # Load test (light)
        echo "Running light load test..."
        for i in {1..100}; do
          curl -s http://localhost:8080/ > /dev/null &
        done
        wait
        echo "Light load test completed"

    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  notification:
    runs-on: ubuntu-latest
    needs: [nightly-build, dependency-update-check, security-audit, performance-baseline, health-check]
    if: always()
    name: Send Notifications
    
    steps:
    - name: Prepare notification
      run: |
        echo "## 🌙 Nightly Build Report - $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.nightly-build.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies: ${{ needs.dependency-update-check.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security-audit.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance: ${{ needs.performance-baseline.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Health Check: ${{ needs.health-check.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Nightly build artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency reports" >> $GITHUB_STEP_SUMMARY
        echo "- Security audit results" >> $GITHUB_STEP_SUMMARY
        echo "- Performance baseline" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: needs.nightly-build.result == 'failure' || needs.security-audit.result == 'failure' || needs.health-check.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "🚨 Nightly build failed! Check the workflow for details."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}