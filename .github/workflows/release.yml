name: Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: Generate changelog
      id: changelog
      run: |
        if git describe --tags --abbrev=0 2>/dev/null; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "## Changes since ${PREVIOUS_TAG}" > changelog.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" >> changelog.md
        else
          echo "## Initial Release" > changelog.md
          git log --pretty=format:"- %s (%h)" >> changelog.md
        fi

    - name: Create Release
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        bodyFile: changelog.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        token: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    runs-on: ubuntu-latest
    needs: create-release
    name: Build and Publish Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Update version in POM
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        mvn versions:set -DnewVersion=${VERSION_NO_V} -DgenerateBackupPoms=false

    - name: Build application
      run: |
        mvn clean package -DskipTests \
          -Dspring.profiles.active=prod

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload release artifacts
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.create-release.outputs.version }}
        artifacts: "target/*.jar"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish]
    name: Deploy to Staging
    environment: 
      name: staging
      url: https://myproject-staging.example.com
    if: github.event.inputs.environment == 'staging' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.create-release.outputs.version }} to staging"
        # Add your deployment commands here
        # Example: kubectl, docker-compose, etc.
        
        # Simulate deployment
        echo "ðŸš€ Deployment to staging successful!"

    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests on staging..."
        # curl -f https://myproject-staging.example.com/health
        echo "âœ… Smoke tests passed!"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Staging deployment of ${{ needs.create-release.outputs.version }} ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish, deploy-staging]
    name: Deploy to Production
    environment: 
      name: production
      url: https://myproject.example.com
    if: github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.create-release.outputs.version }} to production"
        # Add your production deployment commands here
        
        # Simulate deployment
        echo "ðŸš€ Production deployment successful!"

    - name: Run production smoke tests
      run: |
        echo "Running smoke tests on production..."
        # curl -f https://myproject.example.com/health
        echo "âœ… Production smoke tests passed!"

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Production deployment of ${{ needs.create-release.outputs.version }} ${{ job.status }} ðŸš€"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment:
    runs-on: ubuntu-latest
    needs: [create-release, deploy-staging]
    if: always()
    name: Post Deployment Tasks
    
    steps:
    - name: Update documentation
      run: |
        echo "Updating documentation for version ${{ needs.create-release.outputs.version }}"
        # Add commands to update documentation

    - name: Send deployment summary
      run: |
        echo "## Deployment Summary ðŸ“Š" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** âœ… Completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY